/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.flight;

import business.Airlines;
import business.Fleet;
import business.Flight;
import business.Plane;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author runyangzhou
 */
public class FlightViewJPanel extends javax.swing.JPanel {
    private JPanel displayJPanel;
    private Flight flight; 
    private Airlines airlines;
    private String[] place = {"Shanghai","Boston","New York","Tokyo","Toronto","London","Paris","Seattle","Chicago","Cancun","Orlando"};
    private int[] year;
    private int[] month;
    private int[] day;
    private int[] hour;
    private int[] minute;
    /**
     * Creates new form FlightViewJPanel
     */
    public FlightViewJPanel(JPanel displayJPanel, Flight flight, Airlines airlines) {
        initComponents();
        this.displayJPanel = displayJPanel;
        this.flight = flight;
        this.airlines = airlines;
        
        year = new int[1];
        year[0] = 18;
        month = new int[2];
        month[0] = 11;
        month[1] = 12;
        day = new int[31];
        hour = new int[24];
        minute = new int[60];
//        second = new int[60];
        for(int i = 0; i< day.length; i++){
            day[i] = i+1;
        }
        for(int i = 0; i< hour.length; i++){
            hour[i] = i;
        }
        for(int i = 0; i< minute.length; i++){
            minute[i] = i;
        }
        
        comboBoxArrival.setEnabled(false);
        comboBoxDay.setEnabled(false);
        comboBoxDeparture.setEnabled(false);
        comboBoxHour.setEnabled(false);
        comboBoxMinute.setEnabled(false);
        comboBoxMonth.setEnabled(false);
        comboBoxSerialNumber.setEnabled(false);
        comboBoxYear.setEnabled(false);
        
        populate();
    }
    
    private void populate(){
        comboBoxArrival.addItem(flight.getArrivalAirport());
        Date dateStore = flight.getDepartureDate();
        DateFormat df = new SimpleDateFormat("MM/dd/yy hh:mm");
        String d = df.format(dateStore);
        String[] dateStore1 = d.split(" ");
        
        String[] dateS = dateStore1[0].split("/");
        String[] timeS = dateStore1[1].split(":");
        
        int[] date = new int[dateS.length];
        int[] time = new int[timeS.length];
        
        for(int i = 0; i < dateS.length; i++){
            date[i] = Integer.parseInt(dateS[i]);
        }
        for(int i = 0; i < timeS.length; i++){
            time[i] = Integer.parseInt(timeS[i]);
        }
        
        comboBoxDay.addItem(date[1]);
        comboBoxDeparture.addItem(flight.getDepartureAirport());
        comboBoxHour.addItem(time[0]);
        comboBoxMinute.addItem(time[1]);
        comboBoxMonth.addItem(date[0]);
        comboBoxSerialNumber.addItem(flight.getPlane());
        comboBoxYear.addItem(date[2]);
        
        for(Fleet fleet : airlines.getFleetList())
                for(Plane plane : fleet.getPlaneList())
                    if(flight.getPlane() != plane)
                        comboBoxSerialNumber.addItem(plane);
        for(String s : place){
            if(!flight.getDepartureAirport().equals(s))
                comboBoxDeparture.addItem(s);
        }
        for(String s : place){
            if(!flight.getArrivalAirport().equals(s))
                comboBoxArrival.addItem(s);
        }
        for(int i: year){
            if(date[2] != i)
                comboBoxYear.addItem(i);
        }
        for(int i: month){
            if(date[0] != i)
                comboBoxMonth.addItem(i);
        }
        for(int i: day){
            if(date[1] != i)
                comboBoxDay.addItem(i);
        }
        for(int i: hour){
            if(time[0] != i)
                comboBoxHour.addItem(i);
        }
        for(int i: minute){
            if(time[1] != i)
                comboBoxMinute.addItem(i);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxSerialNumber = new javax.swing.JComboBox();
        comboBoxDay = new javax.swing.JComboBox();
        comboBoxHour = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboBoxMonth = new javax.swing.JComboBox();
        comboBoxMinute = new javax.swing.JComboBox();
        comboBoxYear = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxArrival = new javax.swing.JComboBox();
        comboBoxDeparture = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        comboBoxHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxHourActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel5.setText("Time:");

        comboBoxYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxYearActionPerformed(evt);
            }
        });

        jLabel4.setText("Date:");

        jLabel3.setText("Arrival Airport:");

        jLabel2.setText("Departure Airport:");

        jLabel1.setText("Serial Number:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboBoxArrival, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboBoxDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboBoxSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBoxDay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnUpdate)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(comboBoxHour, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBoxMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnBack)))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxHourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxHourActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(((String) comboBoxDeparture.getSelectedItem()).equals((String) comboBoxArrival.getSelectedItem())){
            JOptionPane.showMessageDialog(null, "Arrival and departure cannot be the same");
        }
        else if((int) comboBoxDay.getSelectedItem() == 31 && (int) comboBoxMonth.getSelectedItem() == 11){
            JOptionPane.showMessageDialog(null, "Wrong date");
        }
        else{
            flight.setPlane((Plane) comboBoxSerialNumber.getSelectedItem());
            flight.setArrivalAirport((String) comboBoxArrival.getSelectedItem());
            flight.setDepartureAirport((String) comboBoxDeparture.getSelectedItem());
            String date = "";
            date = (int)comboBoxMonth.getSelectedItem()+ "/" + (int)comboBoxDay.getSelectedItem() + "/"
            +(int)comboBoxYear.getSelectedItem()+ " " + (int)comboBoxHour.getSelectedItem() + ":"
            +(int)comboBoxMinute.getSelectedItem();
            DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm");
            try {
                flight.setDepartureDate(df.parse(date));;
            } catch (ParseException ex) {
                Logger.getLogger(FlightCreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            flight.setPlane((Plane) comboBoxSerialNumber.getSelectedItem());
            JOptionPane.showMessageDialog(null, "update flight successfully");
            comboBoxArrival.setEnabled(false);
            comboBoxDay.setEnabled(false);
            comboBoxDeparture.setEnabled(false);
            comboBoxHour.setEnabled(false);
            comboBoxMinute.setEnabled(false);
            comboBoxMonth.setEnabled(false);
            comboBoxSerialNumber.setEnabled(false);
            comboBoxYear.setEnabled(false);
            
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void comboBoxYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxYearActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        comboBoxArrival.setEnabled(true);
        comboBoxDay.setEnabled(true);
        comboBoxDeparture.setEnabled(true);
        comboBoxHour.setEnabled(true);
        comboBoxMinute.setEnabled(true);
        comboBoxMonth.setEnabled(true);
        comboBoxSerialNumber.setEnabled(true);
        comboBoxYear.setEnabled(true);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        displayJPanel.remove(this);
        CardLayout layout = (CardLayout) displayJPanel.getLayout();
        layout.previous(displayJPanel);
        Component[] components = displayJPanel.getComponents();
        for(Component c : components)
        if(c instanceof FlightMngJPanel){
            FlightMngJPanel panel = (FlightMngJPanel) c;
            panel.populate();
        }
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox comboBoxArrival;
    private javax.swing.JComboBox comboBoxDay;
    private javax.swing.JComboBox comboBoxDeparture;
    private javax.swing.JComboBox comboBoxHour;
    private javax.swing.JComboBox comboBoxMinute;
    private javax.swing.JComboBox comboBoxMonth;
    private javax.swing.JComboBox comboBoxSerialNumber;
    private javax.swing.JComboBox comboBoxYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
